"""
Student information for this assignment:

Replace <Brandon Hsu with your name.
On my/our honor, <Brandon Hsu> and <FULL NAME>, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1:ph23497
UT EID 2:
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        """
        insert node into polynomial linked list
        """
        if coeff == 0:
            return None
        polynomial = Node(coeff, exp)


        if self.head is None or self.head.exp < exp:#want to check if currently largest exp
            polynomial.next = self.head
            self.head = polynomial
            return None

        previous_polynomial = None
        current_polynomial = self.head
        while current_polynomial is not None:
            if current_polynomial.exp > exp:
                previous_polynomial = current_polynomial
                current_polynomial = current_polynomial.next
            elif current_polynomial.exp == exp:
                current_polynomial.coeff += coeff
                if current_polynomial.coeff == 0:
                    if previous_polynomial is None: #deletion method from 3/5 lecture
                        self.head = current_polynomial.next
                    else:
                        previous_polynomial.next = current_polynomial.next
                break
            else:
                break
        #after my while loop current polynomial is the node whose exp is less than what im inserting
        polynomial.next = current_polynomial
        previous_polynomial.next = polynomial


    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        """
        adds a polynomial p to the polynomial and return the resulting polynomial
        """
        final = LinkedList()
        polynomial = self.head
        p_polynomial = p.head
        while polynomial is not None and p_polynomial is not None:
            if p_polynomial.exp < polynomial.exp:
                final.insert_term(polynomial.coeff, polynomial.exp)
                polynomial = polynomial.next

            elif p_polynomial.exp > polynomial.exp:
                final.insert_term(p_polynomial.coeff, p_polynomial.exp)
                p_polynomial = p_polynomial.next
            else:
                final.insert_term(p_polynomial.coeff + polynomial.coeff, p_polynomial.exp)
                polynomial = polynomial.next
                p_polynomial = p_polynomial.next
        #the two linked lists may be of differing length
        #so there may be some remaining in each linked list
        while polynomial is not None:
            final.insert_term(polynomial.coeff, polynomial.exp)
            polynomial = polynomial.next
        while p_polynomial is not None:
            final.insert_term(p_polynomial.coeff, p_polynomial.exp)
            p_polynomial = p_polynomial.next

        return final


    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        final = LinkedList()
        polynomial = self.head

        while polynomial is not None:
            p_polynomial = p.head
            while p_polynomial is not None:
                exponent_sum = p_polynomial.exp + polynomial.exp
                coefficient_sum = p_polynomial.coeff * polynomial.coeff
                final.insert_term(coefficient_sum, exponent_sum)
                p_polynomial = p_polynomial.next
            polynomial = polynomial.next
        return final




    # Return a string representation of the polynomial.
    def __str__(self):
        final = []
        string_final = ''
        polynomial = self.head
        while polynomial is not None:
            final.append(f'({polynomial.coeff}, {polynomial.exp})')
            polynomial = polynomial.next
        for x, y in enumerate(final):
            if x == len(final) -1:
                string_final+=f'{y}'
            else:
                string_final+=f'{y} + '

        return string_final



def main():
    # read data from stdin (terminal/file) using input() and create polynomial p
    x = int(input())
    p = LinkedList()
    for _ in range(x):
        y = input().strip()
        if y != "":
            coeff, exp = y.split()
            coeff = int(coeff)
            exp = int(exp)
            p.insert_term(coeff, exp)


    # read data from stdin (terminal/file) using input() and create polynomial q
    z = int(input())
    q = LinkedList()
    for _ in range(z):
        k = input().strip()
        if k != "":
            coeff, exp = k.split()
            coeff = int(coeff)
            exp = int(exp)
            q.insert_term(coeff, exp)


    # get sum of p and q as a new linked list and print sum
    summation = p.add(q)
    product = p.mult(q)
    print(summation)
    print(product)

    # get product of p and q as a new linked list and print product



if __name__ == "__main__":
    main()
